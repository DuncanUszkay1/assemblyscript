{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","other","thisRange","otherRange","equals","thisRelatedRange","otherRelatedRange","source","toString","normalizedPath","lineAt","start","columnAt","end","formatDiagnosticContext","useColors","text","len","length","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","withRange","has","seenInSource","seenMessagesAtPos","k","set","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","CALL","PROPERTYACCESS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","SOURCE","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_new","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","nextClassId","nextSignatureId","initialized","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_retainInstance","_releaseInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_allocBufferInstance","_allocArrayInstance","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","cached","requireClass","CLASS_PROTOTYPE","lookupFunction","requireFunction","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamedType","createFunctionDeclaration","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","stringInstance","arrayBufferViewInstance","registerWrapperClass","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_final_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","INTERFACE_PROTOTYPE","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","alias","firstChar","parseInt","_values","Map_values","USER_ENTRY","markModuleExports","thisInstanceMembers","instanceMembers","baseInstanceMembers","thisMember","isAny","baseMember","FUNCTION_PROTOTYPE","thisMethod","baseMethod","visibilityEquals","errorRelated","Overload_signatures_must_all_be_public_private_or_protected","VIRTUAL","overloads","baseMethodInstances","instances","PROPERTY_PROTOTYPE","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","Duplicate_identifier_0","nextPrototype","resolved","resolveClass","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","member","propertyPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","elements","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","constructorPrototype","AMBIENT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","initializeFieldAsProperty","typeNode","atEnd","createMethodDeclaration","createParameter","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","signatureNode","base","isAssignableTo","selfProperty","selfGetter","getterInstance","selfSetter","setterInstance","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","includes","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","i64_zero","constantFloatValue","INLINED","ENUMVALUE","isImmutable","Local","index","closureContextOffset","LOCAL","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","closedLocals","nextGlobalClosureOffset","debugLocations","ref","functionTableIndex","varargsStub","virtualStub","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","thisType","local","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","createParent","registerConcreteElement","postfix","stub","clone","COMPILED","STUB","locals","parentFunction","parentResult","size","Not_implemented_0","mask","byteSize","memoryOffset","closedLocal","close","sourceMap","setDebugLocation","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","getterRef","setterRef","firstDeclaration","toBound","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","interfaces","nextMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","implementers","asClass","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","target","Set_values","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","arrayPrototype","getTypeArgumentsTo","staticArrayPrototype","abvInstance","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","acyclic","hasCycle","cyclesTo","except","fieldType","setPrototype","mapPrototype","exceptIfMember","out","extendee","getAllExtendees","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","FeatureFlags","ExpressionId","BinaryOp","None","Unreachable","Funcref","Nullref","Exnref","Auto","UnaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","Module","hasTemporaryFunction","cachedStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","SideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","binary","BinaryModule","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","UNLIMITED_TABLE","types","_BinaryenTypeCreate","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","defaultIndex","indexOf","labelPostfix","numCases","labels","local_set","br","EqI32","local_get","defaultLabel","unshift","lastCase","output","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperand","TupleExtract","TypeKind","TypeFlags","cachedNullableType","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","isFunctionIndex","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","signednessIsImportant","closure32","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisParameterTypes","otherParameterTypes","numParameters","thisThisType","otherThisType","externalEquals","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","closureSignature","normalSignature","cloneParameterTypes","numParameterNames","cloneParameterNames","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","node","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","propertyInstance","resolveProperty","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","hasNestedDefinition","toClosureSignature","setResolvedInstance","reportNode","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","delete","instanceMemberPrototypes","properties","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pending","dependsOnInstance","_values2","Property","LocalFlags","FlowFlags","ConditionKind","continueLabel","scopedLocals","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","retainInstance","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","visitInstance","global_get","addFunction","nativeSizeSize","blocks","relooper","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","segment","addGlobal","instanceofInstance","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","startFunctionInstance","currentBody","compile","initialize","startFunctionBody","files","compileFile","compileExports","startIsEmpty","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureArgumentsLength","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileProperty","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","fromName","isGlobalMutable","getGlobal","warning","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","MemorySegment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","returnValueLocalIndex","nativeReturnType","ifClosure","context","tempLocal","tempLocalIndex","breaks","breakIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","toSignature","fromSignature","tempResult","injectClosedLocals","getClosureReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","namespace","namespaceMembers","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","tempThis","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","findUsedLocals","tempValue","closureContextLocal","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","thisArg","compileCallIndirect","functionTarget","tempFunctionReferenceLocal","getClosurePtr","fn","BuiltinContext","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","ofN","switch","Optional_parameter_must_have_an_initializer","theCall","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","needsVarargsStub","calledName","addCase","removeFunction","render","exprLocalIndex","releaseInstance","newExpr","newType","oldExpr","oldType","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","lastOperand","WritesGlobal","lastOperandType","isCallOnSuper","makeCallIndirect","numExpressions","contextualSignature","numPresentParameters","thisTypeNode","toAnonymousSignature","ensureFunctionTableEntry","nativeUsize","wasm64","Closure_support_is_experimental","closureSize","allocInstance","indexExpr","thenExpr","elseExpr","closureExpr","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","localClosureContextOffset","contextLocal","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","allocArrayInstance","nativeArrayType","dataStartMember","bufferSize","allocBufferInstance","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","ctor","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","abortInstance","filenameArg","backlog","seenlog","donelog","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","abstractStart","abstractEnd","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","paramStart","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignature","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","originalName","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","gt","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","getSource","parseFile","nextFile","getDependee","finish","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":"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A,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4C9e,GAE1C,OADAmK,OAAOnK,EAAKsM,QACJtM,EAAKwM,WAAW,IACtB,KAAK,IAAY,MAAe,UAARxM,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsCwhB,GACpC,OAAQA,GACN,KAAK3C,EAAMa,OAAQ,MAAO,SAC1B,KAAKb,EAAMqB,GAAI,MAAO,KACtB,KAAKrB,EAAMtE,WAAY,MAAO,aAC9B,KAAKsE,EAAMrE,IAAK,MAAO,MACvB,KAAKqE,EAAMqC,OAAQ,MAAO,SAC1B,KAAKrC,EAAML,KAAM,MAAO,OACxB,KAAKK,EAAMwC,MAAO,MAAO,QA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BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAjDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAoDxB,SAAYQ,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAjHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KAoHnB,SAAYP,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iDACA,iDACA,qCAnLF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAsLpB,SAAYQ,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,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A,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,4EACA,iLACA,+MAzKF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA6K1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB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I,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,IAAIjJ,QACT,MAAOksD,IAcT,SAAS6hE,EAAKO,EAAKC,EAAMwC,GAMrBzwH,KAAKguH,IAAY,EAANA,EAMXhuH,KAAKiuH,KAAc,EAAPA,EAMZjuH,KAAKywH,WAAaA,EAoCtB,SAASI,EAAOC,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,YAXnCrD,EAAKxrH,UAAU8uH,WAEfhwH,OAAOC,eAAeysH,EAAKxrH,UAAW,aAAc,CAAEX,OAAO,IAkB7DmsH,EAAKoD,OAASA,EAOd,IAAIG,EAAY,GAOZC,EAAa,GAQjB,SAASrB,EAAQtuH,EAAOmvH,GACpB,IAAIK,EAAKI,EAAWC,EACpB,OAAIV,GAEIU,EAAS,IADb7vH,KAAW,IACgBA,EAAQ,OAC/B4vH,EAAYD,EAAW3vH,IAEZ4vH,GAEfJ,EAAM/C,EAASzsH,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5C6vH,IACAF,EAAW3vH,GAASwvH,GACjBA,IAGHK,GAAU,MADd7vH,GAAS,IACqBA,EAAQ,OAClC4vH,EAAYF,EAAU1vH,IAEX4vH,GAEfJ,EAAM/C,EAASzsH,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtC6vH,IACAH,EAAU1vH,GAASwvH,GAChBA,GAmBf,SAAShB,EAAWxuH,EAAOmvH,GACvB,GAAIl2C,MAAMj5E,GACN,OAAOmvH,EAAWW,EAAQ1D,EAC9B,GAAI+C,EAAU,CACV,GAAInvH,EAAQ,EACR,OAAO8vH,EACX,GAAI9vH,GAAS+vH,EACT,OAAOC,MACR,CACH,GAAIhwH,IAAUiwH,EACV,OAAOtxD,EACX,GAAI3+D,EAAQ,GAAKiwH,EACb,OAAO7rG,EAEf,OAAIpkB,EAAQ,EACDwuH,GAAYxuH,EAAOmvH,GAAUe,MACjCzD,EAAUzsH,EAAQmwH,EAAkB,EAAInwH,EAAQmwH,EAAkB,EAAGhB,GAmBhF,SAAS1C,EAAS2D,EAASC,EAAUlB,GACjC,OAAO,IAAIhD,EAAKiE,EAASC,EAAUlB,GA5CvChD,EAAKmC,QAAUA,EAkCfnC,EAAKqC,WAAaA,EAsBlBrC,EAAKM,SAAWA,EAShB,IAAI6D,EAAUzpH,KAAKmB,IASnB,SAASuoH,EAAW33E,EAAKu2E,EAAUqB,GAC/B,GAAmB,IAAf53E,EAAIhtC,OACJ,MAAMhE,MAAM,gBAChB,GAAY,QAARgxC,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAOwzE,EASX,GARwB,iBAAb+C,GAEPqB,EAAQrB,EACRA,GAAW,GAEXA,IAAcA,GAElBqB,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SAErB,IAAI5vH,EACJ,IAAKA,EAAI+3C,EAAIgI,QAAQ,MAAQ,EACzB,MAAMh5C,MAAM,mBACX,GAAU,IAAN/G,EACL,OAAO0vH,EAAW33E,EAAI5sC,UAAU,GAAImjH,EAAUqB,GAAON,MAQzD,IAHA,IAAIQ,EAAelC,EAAW8B,EAAQE,EAAO,IAEzCxpG,EAASolG,EACJrtH,EAAI,EAAGA,EAAI65C,EAAIhtC,OAAQ7M,GAAK,EAAG,CACpC,IAAIwlC,EAAO19B,KAAKkzD,IAAI,EAAGnhB,EAAIhtC,OAAS7M,GAChCiB,EAAQ02B,SAASkiB,EAAI5sC,UAAUjN,EAAGA,EAAIwlC,GAAOisF,GACjD,GAAIjsF,EAAO,EAAG,CACV,IAAIosF,EAAQnC,EAAW8B,EAAQE,EAAOjsF,IACtCvd,EAASA,EAAO6lG,IAAI8D,GAAOr/F,IAAIk9F,EAAWxuH,SAG1CgnB,GADAA,EAASA,EAAO6lG,IAAI6D,IACJp/F,IAAIk9F,EAAWxuH,IAIvC,OADAgnB,EAAOmoG,SAAWA,EACXnoG,EAoBX,SAAS4pG,EAAUt7E,EAAK65E,GACpB,MAAmB,iBAAR75E,EACAk5E,EAAWl5E,EAAK65E,GACR,iBAAR75E,EACAi7E,EAAWj7E,EAAK65E,GAEpB1C,EAASn3E,EAAIo3E,IAAKp3E,EAAIq3E,KAA0B,kBAAbwC,EAAyBA,EAAW75E,EAAI65E,UAftFhD,EAAKoE,WAAaA,EAyBlBpE,EAAKyE,UAAYA,EAUjB,IAcIT,EAAiBU,WAOjBd,EAAiBI,EAAiBA,EAOlCF,EAAiBF,EAAiB,EAOlCe,EAAaxC,EA5BI,GAAK,IAkCtBlC,EAAOkC,EAAQ,GAMnBnC,EAAKC,KAAOA,EAMZ,IAAI0D,EAAQxB,EAAQ,GAAG,GAMvBnC,EAAK2D,MAAQA,EAMb,IAAIxD,EAAMgC,EAAQ,GAMlBnC,EAAKG,IAAMA,EAMX,IAAIyE,EAAOzC,EAAQ,GAAG,GAMtBnC,EAAK4E,KAAOA,EAMZ,IAAIC,EAAU1C,GAAS,GAMvBnC,EAAK6E,QAAUA,EAMf,IAAI5sG,EAAYqoG,GAAS,EAAc,YAAc,GAMrDN,EAAK/nG,UAAYA,EAMjB,IAAI4rG,EAAqBvD,GAAS,GAAc,GAAc,GAM9DN,EAAK6D,mBAAqBA,EAM1B,IAAIrxD,EAAY8tD,EAAS,GAAG,YAAc,GAM1CN,EAAKxtD,UAAYA,EAMjB,IAAIsyD,EAAgB9E,EAAKxrH,UAMzBswH,EAAcC,MAAQ,WAClB,OAAOxyH,KAAKywH,SAAWzwH,KAAKguH,MAAQ,EAAIhuH,KAAKguH,KAOjDuE,EAAc/B,SAAW,WACrB,OAAIxwH,KAAKywH,UACIzwH,KAAKiuH,OAAS,GAAKwD,GAAmBzxH,KAAKguH,MAAQ,GACzDhuH,KAAKiuH,KAAOwD,GAAkBzxH,KAAKguH,MAAQ,IAUtDuE,EAAc/lH,SAAW,SAAkBslH,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SACrB,GAAI/xH,KAAKyyH,SACL,MAAO,IACX,GAAIzyH,KAAK0yH,aAAc,CACnB,GAAI1yH,KAAKwvH,GAAGvvD,GAAY,CAGpB,IAAI0yD,EAAY7C,EAAWgC,GACvBzD,EAAMruH,KAAKquH,IAAIsE,GACfC,EAAOvE,EAAIF,IAAIwE,GAAWzE,IAAIluH,MAClC,OAAOquH,EAAI7hH,SAASslH,GAASc,EAAKJ,QAAQhmH,SAASslH,GAEnD,MAAO,IAAM9xH,KAAKwxH,MAAMhlH,SAASslH,GAQzC,IAHA,IAAIE,EAAelC,EAAW8B,EAAQE,EAAO,GAAI9xH,KAAKywH,UAClDoC,EAAM7yH,KACNsoB,EAAS,KACA,CACT,IAAIwqG,EAASD,EAAIxE,IAAI2D,GAEjBe,GADSF,EAAI3E,IAAI4E,EAAO3E,IAAI6D,IAAeQ,UAAY,GACvChmH,SAASslH,GAE7B,IADAe,EAAMC,GACEL,SACJ,OAAOM,EAASzqG,EAEhB,KAAOyqG,EAAO7lH,OAAS,GACnB6lH,EAAS,IAAMA,EACnBzqG,EAAS,GAAKyqG,EAASzqG,IASnCiqG,EAAcS,YAAc,WACxB,OAAOhzH,KAAKiuH,MAOhBsE,EAAcU,oBAAsB,WAChC,OAAOjzH,KAAKiuH,OAAS,GAOzBsE,EAAcW,WAAa,WACvB,OAAOlzH,KAAKguH,KAOhBuE,EAAcY,mBAAqB,WAC/B,OAAOnzH,KAAKguH,MAAQ,GAOxBuE,EAAca,cAAgB,WAC1B,GAAIpzH,KAAK0yH,aACL,OAAO1yH,KAAKwvH,GAAGvvD,GAAa,GAAKjgE,KAAKwxH,MAAM4B,gBAEhD,IADA,IAAIx8E,EAAmB,GAAb52C,KAAKiuH,KAAYjuH,KAAKiuH,KAAOjuH,KAAKguH,IACnCqF,EAAM,GAAIA,EAAM,GACK,IAArBz8E,EAAO,GAAKy8E,GADOA,KAG5B,OAAoB,GAAbrzH,KAAKiuH,KAAYoF,EAAM,GAAKA,EAAM,GAO7Cd,EAAcE,OAAS,WACnB,OAAqB,IAAdzyH,KAAKiuH,MAA2B,IAAbjuH,KAAKguH,KAOnCuE,EAAce,IAAMf,EAAcE,OAMlCF,EAAcG,WAAa,WACvB,OAAQ1yH,KAAKywH,UAAYzwH,KAAKiuH,KAAO,GAOzCsE,EAAcgB,WAAa,WACvB,OAAOvzH,KAAKywH,UAAYzwH,KAAKiuH,MAAQ,GAOzCsE,EAAciB,MAAQ,WAClB,OAA0B,IAAP,EAAXxzH,KAAKguH,MAOjBuE,EAAckB,OAAS,WACnB,OAA0B,IAAP,EAAXzzH,KAAKguH,MAQjBuE,EAAcnmH,OAAS,SAAgBH,GAGnC,OAFK4kH,EAAO5kH,KACRA,EAAQimH,EAAUjmH,KAClBjM,KAAKywH,WAAaxkH,EAAMwkH,UAAazwH,KAAKiuH,OAAS,IAAQ,GAAMhiH,EAAMgiH,OAAS,IAAQ,KAErFjuH,KAAKiuH,OAAShiH,EAAMgiH,MAAQjuH,KAAKguH,MAAQ/hH,EAAM+hH,MAS1DuE,EAAc/C,GAAK+C,EAAcnmH,OAOjCmmH,EAAcmB,UAAY,SAAmBznH,GACzC,OAAQjM,KAAKwvH,GAAmBvjH,IASpCsmH,EAAcoB,IAAMpB,EAAcmB,UAQlCnB,EAAc7C,GAAK6C,EAAcmB,UAOjCnB,EAAcqB,SAAW,SAAkB3nH,GACvC,OAAOjM,KAAK6zH,KAAqB5nH,GAAS,GAS9CsmH,EAAcuB,GAAKvB,EAAcqB,SAOjCrB,EAAcwB,gBAAkB,SAAyB9nH,GACrD,OAAOjM,KAAK6zH,KAAqB5nH,IAAU,GAS/CsmH,EAAcnC,IAAMmC,EAAcwB,gBAQlCxB,EAAcyB,GAAKzB,EAAcwB,gBAOjCxB,EAAc0B,YAAc,SAAqBhoH,GAC7C,OAAOjM,KAAK6zH,KAAqB5nH,GAAS,GAS9CsmH,EAAc5C,GAAK4C,EAAc0B,YAOjC1B,EAAc2B,mBAAqB,SAA4BjoH,GAC3D,OAAOjM,KAAK6zH,KAAqB5nH,IAAU,GAS/CsmH,EAAcpC,IAAMoC,EAAc2B,mBAQlC3B,EAAc4B,GAAK5B,EAAc2B,mBAQjC3B,EAActoE,QAAU,SAAiBh+C,GAGrC,GAFK4kH,EAAO5kH,KACRA,EAAQimH,EAAUjmH,IAClBjM,KAAKwvH,GAAGvjH,GACR,OAAO,EACX,IAAImoH,EAAUp0H,KAAK0yH,aACf2B,EAAWpoH,EAAMymH,aACrB,OAAI0B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENr0H,KAAKywH,SAGFxkH,EAAMgiH,OAAS,EAAMjuH,KAAKiuH,OAAS,GAAOhiH,EAAMgiH,OAASjuH,KAAKiuH,MAAShiH,EAAM+hH,MAAQ,EAAMhuH,KAAKguH,MAAQ,GAAO,EAAI,EAFhHhuH,KAAKkuH,IAAIjiH,GAAOymH,cAAgB,EAAI,GAYnDH,EAAcsB,KAAOtB,EAActoE,QAMnCsoE,EAAc+B,OAAS,WACnB,OAAKt0H,KAAKywH,UAAYzwH,KAAKwvH,GAAGvvD,GACnBA,EACJjgE,KAAKsvH,MAAM18F,IAAIg7F,IAQ1B2E,EAAcf,IAAMe,EAAc+B,OAOlC/B,EAAc3/F,IAAM,SAAa2hG,GACxB1D,EAAO0D,KACRA,EAASrC,EAAUqC,IAIvB,IAAIC,EAAMx0H,KAAKiuH,OAAS,GACpBwG,EAAkB,MAAZz0H,KAAKiuH,KACXyG,EAAM10H,KAAKguH,MAAQ,GACnB2G,EAAiB,MAAX30H,KAAKguH,IAEX4G,EAAML,EAAOtG,OAAS,GACtB4G,EAAoB,MAAdN,EAAOtG,KACb6G,EAAMP,EAAOvG,MAAQ,GAGrB+G,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAOvG,QAIF,GAGfgH,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAEN7G,GANPkH,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+Ch1H,KAAKywH,WAQ/D8B,EAAc4C,SAAW,SAAkBC,GAGvC,OAFKvE,EAAOuE,KACRA,EAAalD,EAAUkD,IACpBp1H,KAAK4yB,IAAIwiG,EAAW5D,QAS/Be,EAAcrE,IAAMqE,EAAc4C,SAOlC5C,EAAc8C,SAAW,SAAkBC,GACvC,GAAIt1H,KAAKyyH,SACL,OAAO/E,EAKX,GAJKmD,EAAOyE,KACRA,EAAapD,EAAUoD,IAGvB5E,EAKA,OAAO3C,EAJG2C,EAAKvC,IAAInuH,KAAKguH,IACLhuH,KAAKiuH,KACLqH,EAAWtH,IACXsH,EAAWrH,MACTyC,EAAK6E,WAAYv1H,KAAKywH,UAG/C,GAAI6E,EAAW7C,SACX,OAAO/E,EACX,GAAI1tH,KAAKwvH,GAAGvvD,GACR,OAAOq1D,EAAW9B,QAAUvzD,EAAYytD,EAC5C,GAAI4H,EAAW9F,GAAGvvD,GACd,OAAOjgE,KAAKwzH,QAAUvzD,EAAYytD,EAEtC,GAAI1tH,KAAK0yH,aACL,OAAI4C,EAAW5C,aACJ1yH,KAAKwxH,MAAMrD,IAAImH,EAAW9D,OAE1BxxH,KAAKwxH,MAAMrD,IAAImH,GAAY9D,MACnC,GAAI8D,EAAW5C,aAClB,OAAO1yH,KAAKmuH,IAAImH,EAAW9D,OAAOA,MAGtC,GAAIxxH,KAAK8zH,GAAG1B,IAAekD,EAAWxB,GAAG1B,GACrC,OAAOtC,EAAW9vH,KAAKwwH,WAAa8E,EAAW9E,WAAYxwH,KAAKywH,UAKpE,IAAI+D,EAAMx0H,KAAKiuH,OAAS,GACpBwG,EAAkB,MAAZz0H,KAAKiuH,KACXyG,EAAM10H,KAAKguH,MAAQ,GACnB2G,EAAiB,MAAX30H,KAAKguH,IAEX4G,EAAMU,EAAWrH,OAAS,GAC1B4G,EAAwB,MAAlBS,EAAWrH,KACjB6G,EAAMQ,EAAWtH,MAAQ,GACzBwH,EAAuB,MAAjBF,EAAWtH,IAEjB+G,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1C7G,GAZPkH,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+Ch1H,KAAKywH,WAS/D8B,EAAcpE,IAAMoE,EAAc8C,SAQlC9C,EAAckD,OAAS,SAAgBC,GAGnC,GAFK7E,EAAO6E,KACRA,EAAUxD,EAAUwD,IACpBA,EAAQjD,SACR,MAAMvpH,MAAM,oBAaZ,IAWAysH,EAAQ9C,EAAKzG,EArBjB,GAAIsE,EAIA,OAAK1wH,KAAKywH,WACS,aAAfzwH,KAAKiuH,OACY,IAAjByH,EAAQ1H,MAAgC,IAAlB0H,EAAQzH,KAU3BF,GANI/tH,KAAKywH,SAAWC,EAAKkF,MAAQlF,EAAKmF,OACzC71H,KAAKguH,IACLhuH,KAAKiuH,KACLyH,EAAQ1H,IACR0H,EAAQzH,MAESyC,EAAK6E,WAAYv1H,KAAKywH,UARhCzwH,KAWf,GAAIA,KAAKyyH,SACL,OAAOzyH,KAAKywH,SAAWW,EAAQ1D,EAEnC,GAAK1tH,KAAKywH,SA6BH,CAKH,GAFKiF,EAAQjF,WACTiF,EAAUA,EAAQnH,cAClBmH,EAAQ/F,GAAG3vH,MACX,OAAOoxH,EACX,GAAIsE,EAAQ/F,GAAG3vH,KAAKovH,KAAK,IACrB,OAAOiD,EACXjG,EAAMgF,MAtCU,CAGhB,GAAIpxH,KAAKwvH,GAAGvvD,GACR,OAAIy1D,EAAQlG,GAAG5B,IAAQ8H,EAAQlG,GAAG8C,GACvBryD,EACFy1D,EAAQlG,GAAGvvD,GACT2tD,GAIP+H,EADe31H,KAAKmvH,IAAI,GACNd,IAAIqH,GAASzG,IAAI,IACxBO,GAAG9B,GACHgI,EAAQhD,aAAe9E,EAAM0E,GAEpCO,EAAM7yH,KAAKkuH,IAAIwH,EAAQvH,IAAIwH,IAC3BvJ,EAAMuJ,EAAO/iG,IAAIigG,EAAIxE,IAAIqH,KAI9B,GAAIA,EAAQlG,GAAGvvD,GAClB,OAAOjgE,KAAKywH,SAAWW,EAAQ1D,EACnC,GAAI1tH,KAAK0yH,aACL,OAAIgD,EAAQhD,aACD1yH,KAAKwxH,MAAMnD,IAAIqH,EAAQlE,OAC3BxxH,KAAKwxH,MAAMnD,IAAIqH,GAASlE,MAC5B,GAAIkE,EAAQhD,aACf,OAAO1yH,KAAKquH,IAAIqH,EAAQlE,OAAOA,MACnCpF,EAAMsB,EAmBV,IADAmF,EAAM7yH,KACC6yH,EAAI1C,IAAIuF,IAAU,CAGrBC,EAASxtH,KAAKqyD,IAAI,EAAGryD,KAAKm6D,MAAMuwD,EAAIrC,WAAakF,EAAQlF,aAWzD,IAPA,IAAIsF,EAAO3tH,KAAKmgD,KAAKngD,KAAK4tH,IAAIJ,GAAUxtH,KAAK6tH,KACzCC,EAASH,GAAQ,GAAM,EAAIlE,EAAQ,EAAGkE,EAAO,IAI7CI,EAAYpG,EAAW6F,GACvBQ,EAAYD,EAAU/H,IAAIuH,GACvBS,EAAUzD,cAAgByD,EAAUxG,GAAGkD,IAG1CsD,GADAD,EAAYpG,EADZ6F,GAAUM,EACqBj2H,KAAKywH,WACdtC,IAAIuH,GAK1BQ,EAAUzD,WACVyD,EAAYtI,GAEhBxB,EAAMA,EAAIx5F,IAAIsjG,GACdrD,EAAMA,EAAI3E,IAAIiI,GAElB,OAAO/J,GASXmG,EAAclE,IAAMkE,EAAckD,OAOlClD,EAAc6D,OAAS,SAAgBV,GAKnC,OAJK7E,EAAO6E,KACRA,EAAUxD,EAAUwD,IAGpBhF,EAOO3C,GANI/tH,KAAKywH,SAAWC,EAAK2F,MAAQ3F,EAAK4F,OACzCt2H,KAAKguH,IACLhuH,KAAKiuH,KACLyH,EAAQ1H,IACR0H,EAAQzH,MAESyC,EAAK6E,WAAYv1H,KAAKywH,UAGxCzwH,KAAKkuH,IAAIluH,KAAKquH,IAAIqH,GAASvH,IAAIuH,KAS1CnD,EAAchpH,IAAMgpH,EAAc6D,OAQlC7D,EAAcM,IAAMN,EAAc6D,OAMlC7D,EAAcjD,IAAM,WAChB,OAAOvB,GAAU/tH,KAAKguH,KAAMhuH,KAAKiuH,KAAMjuH,KAAKywH,WAQhD8B,EAAc3D,IAAM,SAAa3iH,GAG7B,OAFK4kH,EAAO5kH,KACRA,EAAQimH,EAAUjmH,IACf8hH,EAAS/tH,KAAKguH,IAAM/hH,EAAM+hH,IAAKhuH,KAAKiuH,KAAOhiH,EAAMgiH,KAAMjuH,KAAKywH,WAQvE8B,EAAczD,GAAK,SAAY7iH,GAG3B,OAFK4kH,EAAO5kH,KACRA,EAAQimH,EAAUjmH,IACf8hH,EAAS/tH,KAAKguH,IAAM/hH,EAAM+hH,IAAKhuH,KAAKiuH,KAAOhiH,EAAMgiH,KAAMjuH,KAAKywH,WAQvE8B,EAAcvD,IAAM,SAAa/iH,GAG7B,OAFK4kH,EAAO5kH,KACRA,EAAQimH,EAAUjmH,IACf8hH,EAAS/tH,KAAKguH,IAAM/hH,EAAM+hH,IAAKhuH,KAAKiuH,KAAOhiH,EAAMgiH,KAAMjuH,KAAKywH,WAQvE8B,EAAcgE,UAAY,SAAmBC,GAGzC,OAFI3F,EAAO2F,KACPA,EAAUA,EAAQhE,SACE,IAAnBgE,GAAW,IACLx2H,KACFw2H,EAAU,GACRzI,EAAS/tH,KAAKguH,KAAOwI,EAAUx2H,KAAKiuH,MAAQuI,EAAYx2H,KAAKguH,MAAS,GAAKwI,EAAWx2H,KAAKywH,UAE3F1C,EAAS,EAAG/tH,KAAKguH,KAAQwI,EAAU,GAAKx2H,KAAKywH,WAS5D8B,EAActD,IAAMsD,EAAcgE,UAOlChE,EAAckE,WAAa,SAAoBD,GAG3C,OAFI3F,EAAO2F,KACPA,EAAUA,EAAQhE,SACE,IAAnBgE,GAAW,IACLx2H,KACFw2H,EAAU,GACRzI,EAAU/tH,KAAKguH,MAAQwI,EAAYx2H,KAAKiuH,MAAS,GAAKuI,EAAWx2H,KAAKiuH,MAAQuI,EAASx2H,KAAKywH,UAE5F1C,EAAS/tH,KAAKiuH,MAASuI,EAAU,GAAKx2H,KAAKiuH,MAAQ,EAAI,GAAK,EAAGjuH,KAAKywH,WASnF8B,EAAcpD,IAAMoD,EAAckE,WAOlClE,EAAcmE,mBAAqB,SAA4BF,GAI3D,GAHI3F,EAAO2F,KACPA,EAAUA,EAAQhE,SAEN,KADhBgE,GAAW,IAEP,OAAOx2H,KAEP,IAAIiuH,EAAOjuH,KAAKiuH,KAChB,OAAIuI,EAAU,GAEHzI,EADG/tH,KAAKguH,MACUwI,EAAYvI,GAAS,GAAKuI,EAAWvI,IAASuI,EAASx2H,KAAKywH,UAE9E1C,EADY,KAAZyI,EACSvI,EAEAA,IAAUuI,EAAU,GAFd,EAAGx2H,KAAKywH,WAY1C8B,EAAcnD,KAAOmD,EAAcmE,mBAQnCnE,EAAcoE,MAAQpE,EAAcmE,mBAMpCnE,EAAc/D,SAAW,WACrB,OAAKxuH,KAAKywH,SAEH1C,EAAS/tH,KAAKguH,IAAKhuH,KAAKiuH,MAAM,GAD1BjuH,MAQfuyH,EAAchE,WAAa,WACvB,OAAIvuH,KAAKywH,SACEzwH,KACJ+tH,EAAS/tH,KAAKguH,IAAKhuH,KAAKiuH,MAAM,IAQzCsE,EAAcqE,QAAU,SAAiB5C,GACrC,OAAOA,EAAKh0H,KAAK62H,YAAc72H,KAAK82H,aAOxCvE,EAAcsE,UAAY,WACtB,IAAI/I,EAAK9tH,KAAKiuH,KACVJ,EAAK7tH,KAAKguH,IACd,MAAO,CACS,IAAZH,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,KAQfyE,EAAcuE,UAAY,WACtB,IAAIhJ,EAAK9tH,KAAKiuH,KACVJ,EAAK7tH,KAAKguH,IACd,MAAO,CACHF,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,IAWRJ,EAAKsJ,UAAY,SAAmBtpF,EAAOgjF,EAAUuD,GACjD,OAAOA,EAAKvG,EAAKuJ,YAAYvpF,EAAOgjF,GAAYhD,EAAKwJ,YAAYxpF,EAAOgjF,IAS5EhD,EAAKuJ,YAAc,SAAqBvpF,EAAOgjF,GAC3C,OAAO,IAAIhD,EACPhgF,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZgjF,IAURhD,EAAKwJ,YAAc,SAAqBxpF,EAAOgjF,GAC3C,OAAO,IAAIhD,EACPhgF,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNgjF,K,iBCxyCR,YAKAt1F,EAAOtG,SAAW,SAASqiG,GACzB,OAAOrvH,MAAMy4C,KAAK42E,EAAIC,SAGxBh8F,EAAOjD,WAAa,SAASg/F,GAC3B,OAAOrvH,MAAMy4C,KAAK42E,EAAIplH,WAGxBqpB,EAAOiN,WAAa,SAASl6B,GAC3B,OAAOrG,MAAMy4C,KAAKpyC,EAAI4D,a,upCCsBxB,cACA,QACA,OA2JoC,gFA3JY,EAAAslH,2BAEhD,aAKA,wBACE,OAAO,IAAI,EAAAC,SAIb,qBAA0BxpG,EAAkBsa,GAC1Cta,EAAQsa,OAASA,GAInB,uBAA4Bta,EAAkBuF,GAC5CvF,EAAQuF,SAAWA,GAIrB,2BAAgCvF,EAAkBqoE,GAChDroE,EAAQqoE,aAAeA,GAIzB,2BAAgCroE,EAAkBsoE,GAChDtoE,EAAQsoE,aAAeA,GAIzB,4BAAiCtoE,EAAkBuoE,GACjDvoE,EAAQuoE,cAAgBA,GAI1B,4BAAiCvoE,EAAkBwoE,GACjDxoE,EAAQwoE,cAAgBA,GAI1B,2BAAgCxoE,EAAkByoE,GAChDzoE,EAAQyoE,aAAeA,GAIzB,0BAA+BzoE,EAAkB0oE,GAC/C1oE,EAAQ0oE,YAAcA,GAIxB,0BAA+B1oE,EAAkB2oE,GAC/C3oE,EAAQ2oE,YAAcA,GAIxB,wBAA6B3oE,EAAkBuY,GAC7CvY,EAAQuY,UAAYA,GAItB,yBAA8BvY,EAAkBwF,GAC9CxF,EAAQwF,WAAaA,GAIvB,wBAA6BxF,EAAkByF,GAC7CzF,EAAQyF,UAAYA,GAItB,0BAA+BzF,EAAkBiK,EAAel3B,GAC9D,IAAI42B,EAAgB3J,EAAQ2J,cACvBA,IAAe3J,EAAQ2J,cAAgBA,EAAgB,IAAIxvB,KAChEwvB,EAActpB,IAAI4pB,EAAOl3B,IAI3B,4BAAiCitB,EAAkB4oE,GACjD5oE,EAAQ4oE,cAAgBA,GAI1B,uBAA4B5oE,EAAkB6oE,GAC5C7oE,EAAQ6oE,SAAWA,GAIrB,6BAAkC7oE,EAAkB4F,GAClD5F,EAAQ4F,eAAiBA,GAId,EAAA6jG,uBAAyB,EAEzB,EAAAC,wBAA0B,EAE1B,EAAAC,wBAA0B,EAE1B,EAAAC,oBAAsB,EAEtB,EAAAC,aAAe,GAEf,EAAAC,gBAAkB,GAElB,EAAAC,2BAA6B,GAE7B,EAAAC,mBAAqB,IAErB,EAAAC,wBAA0B,IAE1B,EAAAC,oBAAsB,IAGnC,yBAA8BlqG,EAAkB+iE,GAC9C/iE,EAAQozB,UAAY2vC,GAItB,0BAA+B/iE,EAAkB+iE,GAC/C/iE,EAAQozB,WAAa2vC,GAIvB,iCAAsC/iE,EAAkBorB,EAAoBC,GAC1ErrB,EAAQ0F,kBAAoB0lB,EAC5BprB,EAAQ2F,gBAAkB0lB,GAI5B,uBAA4BrrB,EAAkB8oE,GAC5C9oE,EAAQ8oE,SAAWA,GAMrB,sBAA2B9oE,GACzB,OAAO,IAAI,EAAAD,QAAQC,IAIrB,0BAA+B8R,GAC7B,OAAOA,EAAQ5R,kBAAoB4R,EAAQhyB,YAAYT,OACnDyyB,EAAQhyB,YAAYgyB,EAAQ5R,qBAC5B,MAIN,qBAA0B4R,EAAkBvjB,GAC1C,OAAOujB,EAAQq4F,UAAU57G,IAO3B,kBAAuB1Q,GACrB,OAAOA,EAAQhB,UAAY,EAAAF,mBAAmBI,MAIhD,qBAA0Bc,GACxB,OAAOA,EAAQhB,UAAY,EAAAF,mBAAmBK,SAIhD,mBAAwBa,GACtB,OAAOA,EAAQhB,UAAY,EAAAF,mBAAmBM,OAMhD,iBAEE60B,EAEA3yB,EAEAgH,EAEA0mG,GAAgB,GAEhB/6E,EAAQ9O,OAAOonG,UAAUjrH,EAAMgH,EAAM0mG,IAIvC,oBAAyB/6E,GACvB,OAAOA,EAAQ9O,OAAOqnG,YAIxB,uBAA4Bv4F,EAAkB3L,GAC5C,OAAO2L,EAAQ9O,OAAOsnG,YAAYnkG,IAMpC,6BAAkC2L,GAChCA,EAAQm5D,cAIV,mBAAwBn5D,GAEtB,OADAA,EAAQ9O,OAAOunG,SACR,IAAI,EAAAphC,SAASr3D,GAASk5D,WAI/B,oBAAyBl5D,GACvB,OAAO,EAAA0qF,WAAWE,MAAM5qF,IAI1B,oBAAyBA,GACvB,OAAO,EAAAirF,WAAWL,MAAM5qF,IAI1B,UACA,UACA,WACA,WACA,UACA,WACA,UACA,WACA,UACA,UACA,UACA,UAEA,WACA,aACS,EAAA04F,OAGT,W,6BC1PA,SAAgBC,EAAQhnG,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAASpwB,EAAYgwB,EAAoBC,GACvDD,EAAOC,GAAcjwB,EACrBgwB,EAAOC,EAAS,GAAKjwB,IAAU,EAC/BgwB,EAAOC,EAAS,GAAKjwB,IAAU,GAC/BgwB,EAAOC,EAAS,GAAKjwB,IAAU,GAIjC,SAAgBi3H,EAAQjnG,EAAoBC,GAC1C,IAAIs8F,EAAKyK,EAAQhnG,EAAQC,GACrBu8F,EAAKwK,EAAQhnG,EAAQC,EAAS,GAClC,OAAOhI,QAAQskG,EAAIC,G,oLAzCrB,kBAAuBx8F,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB,mBAAwBjwB,EAAYgwB,EAAoBC,GACtDD,EAAOC,GAAUjwB,GAInB,mBAAwBgwB,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B,oBAAyBjwB,EAAYgwB,EAAoBC,GACvDD,EAAOC,GAAcjwB,EACrBgwB,EAAOC,EAAS,GAAKjwB,IAAU,GAIjC,YAQA,aAQA,YAOA,oBAAyBA,EAAYgwB,EAAoBC,GACvDG,EAAShH,QAAQppB,GAAQgwB,EAAQC,GACjCG,EAAS9G,SAAStpB,GAAQgwB,EAAQC,EAAS,IAI7C,mBAAwBD,EAAoBC,GAC1C,OAAO+7F,WAAWgL,EAAQhnG,EAAQC,KAIpC,oBAAyBjwB,EAAYgwB,EAAoBC,GACvDG,EAAS27F,WAAW/rH,GAAQgwB,EAAQC,IAItC,mBAAwBD,EAAoBC,GAC1C,OAAOi8F,WAAW+K,EAAQjnG,EAAQC,KAIpC,oBAAyBjwB,EAAYgwB,EAAoBC,GACvD,IAAIinG,EAAWjL,WAAWjsH,GAC1BowB,EAAShH,QAAQ8tG,GAAWlnG,EAAQC,GACpCG,EAAS9G,SAAS4tG,GAAWlnG,EAAQC,EAAS,K,qHCtEhD,qBAA6B6N,EAA4B,MACvD,GAAIA,EAAU,CACZ,IAAInyB,EAAMmyB,EAASlyB,OACfurH,EAAS,IAAI5wH,MAASoF,GAC1B,IAAK,IAAI5M,EAAI,EAAGA,EAAI4M,IAAO5M,EAAGuc,UAAU67G,EAAOp4H,GAAK++B,EAAS/+B,IAC7D,OAAOo4H,EAET,OAAO,IAAI5wH,OAGb,mBAA2Bu3B,EAA0B,MACnD,GAAIA,EAAU,CACZ,IAAIq5F,EAAS,IAAI1wH,IAEjB,IAAK,IAAIkwB,EAAUmQ,WAAWhJ,GAAW/+B,EAAI,EAAG4N,EAAIgqB,EAAQ/qB,OAAQ7M,EAAI4N,IAAK5N,EAAG,CAC9E,IAAIq4H,EAAI97G,UAAUqb,EAAQ53B,IAC1Bo4H,EAAO7lG,IAAI8lG,GAEb,OAAOD,EAET,OAAO,IAAI1wH,KAGb,mBAA6Bq3B,EAA4B,KAAMu5F,EAA6B,MAC1F,IAAIF,EAAS,IAAIzwH,IACjB,GAAIo3B,EAEF,IAAK,IAAIxK,EAAQC,SAASuK,GAAW/+B,EAAI,EAAG4N,EAAI2mB,EAAM1nB,OAAQ7M,EAAI4N,IAAK5N,EAAG,CACxE,IAAI4N,EAAI2O,UAAUgY,EAAMv0B,IACpBq4H,EAAI3tH,OAAOq0B,EAASl+B,IAAI+M,IAC5BwqH,EAAOvqH,IAAID,EAAGyqH,GAGlB,GAAIC,EAEF,IAAK,IAAI/jG,EAAQC,SAAS8jG,GAAYt4H,EAAI,EAAG4N,EAAI2mB,EAAM1nB,OAAQ7M,EAAI4N,IAAK5N,EAAG,CACzE,IAAI4N,EAAI2O,UAAUgY,EAAMv0B,IACpBq4H,EAAI3tH,OAAO4tH,EAAUz3H,IAAI+M,IAC7BwqH,EAAOvqH,IAAID,EAAGyqH,GAGlB,OAAOD,I,kGCxCT,sBAA2B9M,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,K,6HCE7B,aAUA,SAAgBhuG,EAAc3J,GAK5B,IAJA,IAiBIirB,EAjBA3iB,EAAM,EACNrP,EAAM+G,EAAK9G,OAGRoP,EAAM,EAAIrP,GACS,IAAxB+G,EAAK5G,WAAWkP,IAZF,IAadtI,EAAK5G,WAAWkP,EAAM,IAEtBA,GAAO,EAUT,KAPIA,EAAM,GAAKrP,EAAM+G,EAAK9G,UACxB8G,EAAOA,EAAK1G,UAAUgP,EAAKrP,GAC3BA,GAAOqP,EACPA,EAAM,GAIDA,EAAM,EAAIrP,GAAK,CAIpB,GAHAgyB,GAAQ,EA1BM,IA8BZjrB,EAAK5G,WAAWkP,IACY,IAA5BtI,EAAK5G,WAAWkP,EAAM,GACtB,CAGA,IADA2iB,EAAQ3iB,EAAM,GAAKrP,IAEjBqP,EAAM,EAAIrP,GApCA,IAqCV+G,EAAK5G,WAAWkP,EAAM,GACtB,CACAtI,EAAOirB,EACHjrB,EAAK1G,UAAU,EAAGgP,GAClBtI,EAAK1G,UAAU,EAAGgP,GAAOtI,EAAK1G,UAAUgP,EAAM,GAClDrP,GAAO,EACP,SAKF,IADAgyB,EAAQ3iB,EAAM,GAAKrP,IACsB,IAA5B+G,EAAK5G,WAAWkP,EAAM,IACjCA,EAAM,EAAIrP,GACkB,IAA5B+G,EAAK5G,WAAWkP,EAAM,IAlDZ,IAmDVtI,EAAK5G,WAAWkP,EAAM,GACtB,CAEA,IAAIs8G,EAAOt8G,EACX,OAASs8G,GAAQ,GACf,GAxDQ,IAwDJ5kH,EAAK5G,WAAWwrH,GAAoB,CAClCt8G,EAAMs8G,GAAQ,GACa,IAA7B5kH,EAAK5G,WAAWwrH,EAAO,IACM,IAA7B5kH,EAAK5G,WAAWwrH,EAAO,KAEvB5kH,EAAOirB,EACHjrB,EAAK1G,UAAU,EAAGsrH,GAClB5kH,EAAK1G,UAAU,EAAGsrH,GAAQ5kH,EAAK1G,UAAUgP,EAAM,GACnDrP,GAAOqP,EAAM,EAAIs8G,EACjBt8G,EAAMs8G,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKt8G,EAAM,IACT,GAAPA,GACoB,IAAtBtI,EAAK5G,WAAW,IACM,IAAtB4G,EAAK5G,WAAW,IAChB,CAEAH,GADA+G,EAAOA,EAAK1G,UAAUgP,EAAM,IACjBpP,OACX,WAKRoP,IAEF,OAAOrP,EAAM,EAAI+G,EAAO,IAc1B,SAAgB6kH,EAAQpsH,GACtB,IAAI6P,EAAM7P,EAAeS,OACzB,GAAIoP,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGV7P,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAAS6P,EAAM,GACb,GA7Gc,IA6GV7P,EAAeW,WAAWkP,GAC5B,OAAO7P,EAAea,UAAU,EAAGgP,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4B7P,EAAwBqsH,GAClD,OAAIrsH,EAAemR,WAAW,QACrBnR,EAEFkR,EACLk7G,EAAQC,GAAU,EAAAx2H,eAAiBmK,IAKvC,a,sPC3GA,SAAkBssH,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Br4H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkC+K,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkC/K,GAChC,MAAMs4H,EAAS,GAAJt4H,EACX,OAAOs4H,GAAM,IAAcA,GAAM,KACrB,IAALt4H,GACK,IAALA,GACAA,EAAI,SAmLqB+K,EAnLY/K,GAoL9B,KAAO+K,EAAO,QACrBwtH,EAAmBxtH,EAAaytH,IAFzC,IAAkCztH,GA/KlC,8BAAmC/K,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMs4H,EAAS,GAAJt4H,EACX,OAAOs4H,GAAM,IAAcA,GAAM,KAC1Bt4H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB+K,EAzKY/K,GA0K7B,KAAO+K,EAAO,QACrBwtH,EAAmBxtH,EAAa0tH,IAFzC,IAAiC1tH,GArKjC,MAAMytH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a stub. */\n  STUB = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  IN_SCOPE_CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = new Array();\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  /** Checks if this is a call calling a method on super. */\n  get isCallOnSuper(): bool {\n    if (this.kind != NodeKind.CALL) return false;\n    var expression = changetype<CallExpression>(this).expression;\n    if (expression.kind != NodeKind.PROPERTYACCESS) return false;\n    var target = (<PropertyAccessExpression>expression).expression;\n    if (target.kind == NodeKind.SUPER) return true;\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: (Expression | null)[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, changetype<Range>(0)); // ¯\\(ツ)/¯\n    this.range = new Range(this, 0, text.length);\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Rememberd column number. */\n  private lineColumn: i32 = 0;\n\n  /** Determines the line number at the specified position. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n  debugInfoRef: usize = 0;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    return this.lookupFunction(CommonNames.abort);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize, id: u32): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__retain(ptr: usize): usize` instance. */\n  get retainInstance(): Function {\n    var cached = this._retainInstance;\n    if (!cached) this._retainInstance = cached = this.requireFunction(CommonNames.retain);\n    return cached;\n  }\n  private _retainInstance: Function | null = null;\n\n  /** Gets the runtime `__release(ptr: usize): void` instance. */\n  get releaseInstance(): Function {\n    var cached = this._releaseInstance;\n    if (!cached) this._releaseInstance = cached = this.requireFunction(CommonNames.release);\n    return cached;\n  }\n  private _releaseInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocBufferInstance(): Function {\n    var cached = this._allocBufferInstance;\n    if (!cached) this._allocBufferInstance = cached = this.requireFunction(CommonNames.allocBuffer);\n    return cached;\n  }\n  private _allocBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocArrayInstance(): Function {\n    var cached = this._allocArrayInstance;\n    if (!cached) this._allocArrayInstance = cached = this.requireFunction(CommonNames.allocArray);\n    return cached;\n  }\n  private _allocArrayInstance: Function | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        assert(!interfacePrototypes);\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        assert(!basePrototype);\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) continue; // explicitly disabled\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component: \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name),\n    /** Offset of this variable within closure context, if it's value is held there */\n    public closureContextOffset: u32 = 0,\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n    this.closureContextOffset = closureContextOffset;\n  }\n\n  close(offset: u32): Local {\n    return new Local(\n      this.name,\n      this.index,\n      this.type,\n      <Function>this.parent,\n      <VariableLikeDeclarationStatement>this.declaration,\n      offset\n    );\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  get hasNestedDefinition(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.FUNCTION;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** List of all closed locals discovered so far */\n  closedLocals: Map<string, Local> = new Map();\n  /** Next global closure offset to use, assuming that classes are packed as c-structs in the order given */\n  /** This is temporary- once we have a ScopeAnalyzer, then the closure class will be defined before we */\n  /** start compiling, and we can just insert a field access */\n  nextGlobalClosureOffset: u32 = 4;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (signature.thisType !== null) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          signature.thisType!, // asc can't see the !== null above\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    if (this.parent.kind == ElementKind.FUNCTION) {\n      var parentFunction = <Function>this.parent;\n      var parentResult = parentFunction.flow.lookup(name);\n      if (parentResult === null) return null;\n      if (parentFunction.closedLocals.size > 0) { // TODO allow nested closure definitions\n        this.program.error(\n          DiagnosticCode.Not_implemented_0,\n          this.identifierNode.range,\n          \"Nested Closure Declarations\"\n        );\n        return null;\n      }\n      if (parentResult.kind == ElementKind.LOCAL) {\n        let local = changetype<Local>(parentResult);\n        if (this.closedLocals.has(local.name)) return assert(this.closedLocals.get(local.name));\n        let mask = local.type.byteSize - 1;\n        let memoryOffset = this.nextGlobalClosureOffset;\n        if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n        var closedLocal = local.close(memoryOffset);\n        this.nextGlobalClosureOffset = memoryOffset + local.type.byteSize;\n        this.closedLocals.set(local.name, closedLocal);\n        return closedLocal;\n      }\n    }\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt()\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Anyref: NativeType = 8 /* _BinaryenTypeAnyref */;\n  export const Nullref: NativeType = 9 /* _BinaryenTypeNullref */;\n  export const Exnref: NativeType = 10 /* _BinaryenTypeExnref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */,\n  TupleMake = 47 /* _BinaryenTupleMakeId */,\n  TupleExtract = 48 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 88 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 89 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 90 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 91 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 92 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 93 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 94 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 95 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 96 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 97 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 98 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 99 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 100 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 101 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 102 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 103 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 104 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 105 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 106 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 162 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 163 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 164 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 165 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 166 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 167 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 168 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 169 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 170 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 171 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 172 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 173 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 174 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 175 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 176 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(): Module {\n    return new Module(binaryen._BinaryenModuleCreate());\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length));\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // tuples (pseudo instructions)\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    binaryen._BinaryenSetOptimizeLevel(optimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(shrinkLevel);\n    binaryen._BinaryenSetDebugInfo(debugInfo);\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel === 0) {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(12);\n      binaryen._BinaryenSetFlexibleInlineMaxSize(70);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(200);\n    } else {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(\n        optimizeLevel == 0 && shrinkLevel >= 0\n          ? 2\n          : 4\n      );\n      binaryen._BinaryenSetFlexibleInlineMaxSize(65);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(80);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"ssa-nomerge\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n      if (usesARC) {\n        if (optimizeLevel < 3) {\n          passes.push(\"flatten\");\n        }\n        passes.push(\"post-assemblyscript\");\n      }\n      passes.push(\"optimize-instructions\");\n      passes.push(\"inlining\");\n      passes.push(\"dce\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"inlining-optimizing\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n      }\n      passes.push(\"vacuum\");\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (binaryen._BinaryenGetLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals-nostructure\");\n          passes.push(\"vacuum\");\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"precompute-propagate\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case <u32>NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(expr: ExpressionRef, flags: ExpressionRunnerFlags, maxDepth: i32 = 50, maxLoopIterations: i32 = 1): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags,\n  Local\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11,\n  /** Is a closure type. */\n  IN_SCOPE_CLOSURE = 1 << 12\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** closed over locals */\n  locals: Map<string, Local> | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n    this.locals = null;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isFunctionIndex) return true;\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  get isFunctionIndex(): bool {\n    return this.signatureReference !== null && !this.is(TypeFlags.IN_SCOPE_CLOSURE);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.is(TypeFlags.REFERENCE)) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.is(TypeFlags.NULLABLE) == other.is(TypeFlags.NULLABLE)\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n\n  /** Type of an in-context local */\n  static readonly closure32: Type = new Type(Type.i32.kind,\n    TypeFlags.IN_SCOPE_CLOSURE |\n    TypeFlags.REFERENCE,\n    Type.i32.size\n  );\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  // Check to see if this signature is equivalent to the caller, ignoring the this type\n  externalEquals(other: Signature): bool {\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType !== null) {\n      return false;\n    }\n\n    return this.externalEquals(other);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n\n  toClosureSignature(): Signature {\n    var closureSignature = this.clone();\n    closureSignature.thisType = this.program.options.usizeType;\n    return closureSignature;\n  }\n\n  // Reverses toClosureSignature, for when we recompile a function with the context argument\n  // Not convinced this is the right way to go about getting the original unmodified signature, but it works\n  toAnonymousSignature(): Signature {\n    var normalSignature = this.clone();\n    normalSignature.thisType = null;\n    return normalSignature;\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    var clone = new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n    var parameterNames = this.parameterNames;\n    if (parameterNames) {\n      let numParameterNames = parameterNames.length;\n      let cloneParameterNames = new Array<string>(numParameterNames);\n      for (let i = 0; i < numParameterNames; ++i) {\n        cloneParameterNames[i] = parameterNames[i];\n      }\n      clone.parameterNames = cloneParameterNames;\n    }\n    clone.requiredParameters = this.requiredParameters;\n    return clone;\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    if (prototype.hasNestedDefinition) signature = signature.toClosureSignature();\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          makeMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    return new Flow(parentFunction);\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.is(TypeFlags.VALUE)) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = compiler.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nconst CLOSURE_TAG = 1 << 31;\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.finalizeVirtualStub(instance);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, type);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType()),\n                type\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.is(CommonFlags.INSTANCE)\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance),\n                classInstance.type\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var varTypes: NativeType[] | null = null;\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n\n    // We need to hardcode the local index used by makeRetain because there is no corresponding flow\n    if (type.isManaged) {\n      valueExpr = this.makeRetain(valueExpr, type, 1);\n      varTypes = [ NativeType.I32 ];\n    }\n\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, varTypes, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace, makeRetain, or makeRelease here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType), type, 1)\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType), type, 2)\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    assert(this.writeStaticBuffer(buf, runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    assert(u32(index) < u32(2147483648));\n    functionTable.push(instance);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // Prevent returning a closure in an exported function, since interop with closures is\n    // not yet supported\n    var returnSignature = returnType.signatureReference;\n    if (returnSignature !== null && flow.parentFunction.is(CommonFlags.EXPORT)) {\n      var returnValueLocalIndex = flow.getTempLocal(returnType).index;\n      var nativeReturnType = returnType.toNativeType();\n      expr = module.flatten([\n        module.local_set(returnValueLocalIndex, expr),\n        this.ifClosure(\n          module.local_get(returnValueLocalIndex, nativeReturnType),\n          this.makeAbort(null, statement), // TODO: throw\n          module.nop()\n        ),\n        module.local_get(returnValueLocalIndex, nativeReturnType)\n      ], nativeReturnType);\n    }\n\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp;\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr, type)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr, returnType);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      var toSignature = toType.signatureReference;\n      var fromSignature = fromType.signatureReference;\n      if (toSignature !== null && fromSignature !== null && fromSignature.externalEquals(toSignature) && fromType.is(TypeFlags.IN_SCOPE_CLOSURE)) {\n        // When we convert from the closure type into a function pointer, we first\n        // update the local copy of the scope with the newest values\n        var tempResult = this.currentFlow.getTempLocal(fromType);\n        var convertExpr = module.block(null, [\n          module.local_set(\n            tempResult.index,\n            expr\n          ),\n          this.injectClosedLocals(tempResult),\n          this.getClosureReference(module.local_get(tempResult.index, fromType.toNativeType()))\n        ], toType.toNativeType());\n\n        // this.currentFlow.freeTempLocal(tempResult);\n        return convertExpr;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.range,\n              \"ref.eq instruction\"\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.range,\n              \"ref.eq instruction\"\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let namespaceMembers = namespace.members;\n            if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = assert(namespaceMembers.get(CommonNames.pow));\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let namespaceMembers = namespace.members;\n            if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = assert(namespaceMembers.get(CommonNames.pow));\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (local.closureContextOffset > 0) {\n          // TODO: ability to update closed over locals\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            valueExpression.range,\n            \"Updating closed locals\"\n          );\n          return module.unreachable();\n        }\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            assert(thisExpression),\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          valueType,\n          module.local_get(localIndex, type.toNativeType()),\n          type,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr, valueType);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          valueType,\n          module.global_get(global.internalName, nativeType),\n          type,\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              valueType,\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              fieldType,\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            valueType,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            fieldType,\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  private injectClosedLocals(\n    closureContextLocal: Local\n  ): ExpressionRef {\n    var module = this.module;\n    var type = closureContextLocal.type;\n    var locals = assert(type.locals);\n    let _values = Map_values(locals);\n    var exprs = new Array<ExpressionRef>(_values.length);\n    assert(type.is(TypeFlags.REFERENCE));\n    for (let i = 0, k = _values.length; i < k; ++i) {\n      let local = unchecked(_values[i]);\n      let nativeType = local.type.toNativeType();\n      assert(local.closureContextOffset > 0);\n      exprs[i] = module.store(\n        local.type.byteSize,\n        module.local_get(closureContextLocal.index, this.options.nativeSizeType),\n        module.local_get(local.index, nativeType),\n        nativeType,\n        local.closureContextOffset\n      );\n    }\n    return module.block(null, exprs);\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let superCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let nativeSizeType = this.options.nativeSizeType;\n        signature = assert(local.type.signatureReference);\n        if (local.type.is(TypeFlags.IN_SCOPE_CLOSURE)) {\n          if (this.currentFlow.parentFunction.parent.kind == ElementKind.FUNCTION) {\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.expression.range,\n              \"Calling a Closure from an anonymous function that shares the same parent.\"\n            );\n            return module.unreachable();\n          }\n          // If we're calling a local we know to be a closure, then we must still be in the creator functions\n          // scope. Because of this, we should update the values of locals that are still available\n          return module.block(null, [\n            this.injectClosedLocals(local),\n            this.compileCallIndirect(\n              assert(signature),\n              module.load(\n                local.type.byteSize,\n                local.type.is(TypeFlags.SIGNED),\n                module.local_get(local.index, nativeSizeType),\n                this.options.nativeSizeType,\n                0\n              ),\n              expression.args,\n              expression,\n              module.local_get(local.index, nativeSizeType),\n              contextualType == Type.void\n            )\n          ], signature.returnType.toNativeType());\n        }\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    // Once we get here, we have a function reference. With the new scheme, this function\n    // could possibly be a closure. So here we check to see if it's a closure, then apply\n    // the appropriate call logic\n    signature = assert(signature); // FIXME: asc can't see this yet\n    var returnType = signature.returnType;\n    var tempFunctionReferenceLocal = this.currentFlow.getTempLocal(this.options.usizeType);\n    var usize = this.options.nativeSizeType;\n    return module.block(null, [\n      module.local_set(tempFunctionReferenceLocal.index, indexArg),\n      this.ifClosure(\n        module.local_get(tempFunctionReferenceLocal.index, usize),\n        this.compileCallIndirect( // If this is a closure\n          signature.toClosureSignature(),\n          module.block(null, [\n            module.load(\n              4,\n              true,\n              this.getClosurePtr(\n                module.local_get(tempFunctionReferenceLocal.index, usize),\n              ),\n              usize,\n              0\n            ),\n          ], this.options.nativeSizeType),\n          expression.args,\n          expression,\n          this.getClosurePtr(\n            module.local_get(tempFunctionReferenceLocal.index, usize),\n          ),\n          contextualType == Type.void\n        ),\n        this.compileCallIndirect( // If this function isn't a closure\n          signature,\n          module.local_get(tempFunctionReferenceLocal.index, usize),\n          expression.args,\n          expression,\n          0,\n          contextualType == Type.void\n        )\n      )\n    ], constraints & Constraints.WILL_DROP ? contextualType.toNativeType() : returnType.toNativeType());\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(new BuiltinContext(\n        this,\n        prototype,\n        typeArguments,\n        expression.args,\n        contextualType,\n        expression,\n        false\n      ));\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    assert(!instance.is(CommonFlags.VIRTUAL));\n\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr, paramType);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, initType);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 0; n < numParameters; ++n) {\n            paramExprs[1 + n] = module.local_get(1 + n, parameterTypes[n].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n]);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef, type: Type, exprLocalIndex: i32 = -1): ExpressionRef {\n    var module = this.module;\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    if (type !== null && type.isFunctionIndex) {\n      if (exprLocalIndex < 0) {\n        var exprLocal = this.currentFlow.getTempLocal(type);\n        exprLocalIndex = exprLocal.index;\n      }\n      var nativeType = type.toNativeType();\n      var usize = this.options.nativeSizeType;\n      var functionRetainCall = module.block(null, [\n        module.local_set(exprLocalIndex, expr),\n        module.drop(\n          module.call(\n            retainInstance.internalName,\n            [\n              this.ifClosure(\n                module.local_get(exprLocalIndex, nativeType),\n                this.getClosurePtr(module.local_get(exprLocalIndex, nativeType)),\n                usize == NativeType.I32 ? module.i32(0) : module.i64(0)\n              )\n            ],\n            usize\n          )\n        ),\n        module.local_get(exprLocalIndex, nativeType)\n      ], nativeType);\n\n      // this.currentFlow.freeTempLocal(exprLocal);\n\n      return functionRetainCall;\n    }\n\n    return module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef, type: Type, exprLocalIndex: i32 = -1): ExpressionRef {\n    var module = this.module;\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n\n    if (type !== null && type.isFunctionIndex) {\n      if (exprLocalIndex < 0) {\n        var exprLocal = this.currentFlow.getTempLocal(type);\n        exprLocalIndex = exprLocal.index;\n      }\n      var nativeType = type.toNativeType();\n      var functionReleaseCall = module.block(null, [\n        module.local_set(exprLocalIndex, expr),\n        module.call(\n          releaseInstance.internalName,\n          [\n            this.ifClosure(\n              module.local_get(exprLocalIndex, nativeType),\n              this.getClosurePtr(module.local_get(exprLocalIndex, nativeType)),\n              this.options.nativeSizeType == NativeType.I32 ? module.i32(0) : module.i64(0)\n            )\n          ],\n          NativeType.None\n        )\n      ], NativeType.None);\n\n      // TODO: fix a bug in which this free causes some overwrites\n      // this.currentFlow.freeTempLocal(exprLocal);\n\n      return functionReleaseCall;\n    }\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** The type of the new expression. */\n    newType: Type,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** The type of the old expression. */\n    oldType: Type,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr, oldType),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType), newType)\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType), oldType)\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr, type), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType()),\n                local.type\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType()),\n          local.type\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr, returnType);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isCallOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(Type.i32, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, NativeType.I32)\n      ], NativeType.I32);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], NativeType.I32);\n    }\n    var expr = module.call_indirect(\n      indexArg,\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        prototype.hasNestedDefinition ? signature.toClosureSignature() : signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n    }\n\n    // if this anonymous function turns out to be a non-closure, recompile a version\n    // of the function without context, deleting the previous function\n    if (instance.closedLocals.size == 0 && instance.prototype.hasNestedDefinition) {\n      this.module.removeFunction(instance.internalName);\n      instance = new Function(\n        instance.prototype.name + \"~nonClosure\",\n        instance.prototype,\n        null,\n        instance.signature.toAnonymousSignature(),\n        contextualTypeArguments\n      );\n      this.compileFunction(instance);\n    }\n    this.currentType = instance.signature.type;\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n\n    if(index < 0) return this.module.unreachable();\n\n    var nativeUsize = this.options.nativeSizeType;\n    var wasm64 = nativeUsize == NativeType.I64;\n\n    if(instance.closedLocals.size > 0) {\n      this.warning(\n        DiagnosticCode.Closure_support_is_experimental,\n        instance.prototype.declaration.range\n      );\n\n      // Append the appropriate signature and flags for this closure type, then set it to currentType\n      this.currentType = Type.closure32;\n      this.currentType.signatureReference = instance.signature;\n\n      // create a local which will hold our closure\n      var tempLocal = flow.getAutoreleaseLocal(this.currentType);\n      var tempLocalIndex = tempLocal.index;\n\n      // copied closed locals into type\n      this.currentType.locals = instance.closedLocals;\n\n      const closureSize = instance.nextGlobalClosureOffset;\n\n      var allocInstance = this.program.allocInstance;\n      this.compileFunction(allocInstance);\n\n      var closureExpr = this.module.flatten([\n        this.module.local_set( // Allocate memory for the closure\n          tempLocalIndex,\n          this.makeRetain(\n            this.module.call(allocInstance.internalName, [\n              wasm64 ? this.module.i64(closureSize) : this.module.i32(closureSize),\n              wasm64 ? this.module.i64(0) : this.module.i32(0)\n            ], nativeUsize),\n            this.currentType\n          )\n        ),\n        this.module.store( // Store the function pointer at the first index\n          4,\n          this.module.local_get(tempLocalIndex, nativeUsize),\n          wasm64 ? this.module.i64(index) : this.module.i32(index),\n          nativeUsize,\n          0\n        ),\n        this.module.local_get(tempLocalIndex, nativeUsize) // load the closure locals index\n      ], nativeUsize);\n\n      // flow.freeTempLocal(tempLocal);\n\n      return closureExpr;\n    }\n\n    return wasm64 ? this.module.i64(index) : this.module.i32(index);\n  }\n\n  private ifClosure(\n    indexExpr: ExpressionRef,\n    thenExpr: ExpressionRef,\n    elseExpr: ExpressionRef\n  ): ExpressionRef {\n    var module = this.module;\n    var wasm64 = this.options.nativeSizeType == NativeType.I64;\n\n    return module.if(\n      module.binary(\n        wasm64 ? BinaryOp.EqI64 : BinaryOp.EqI32,\n        module.binary(\n          wasm64 ? BinaryOp.AndI64 : BinaryOp.AndI32,\n          indexExpr,\n          wasm64 ? module.i64(CLOSURE_TAG) : module.i32(CLOSURE_TAG)\n        ),\n        wasm64 ? module.i64(CLOSURE_TAG) : module.i32(CLOSURE_TAG)\n      ),\n      thenExpr,\n      elseExpr\n    );\n  }\n\n  private getClosurePtr(closureExpr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var wasm64 = this.options.nativeSizeType == NativeType.I64;\n\n    return module.binary(\n      wasm64 ? BinaryOp.ShlI64 : BinaryOp.ShlI32,\n      closureExpr,\n      wasm64 ? module.i64(4) : module.i32(4)\n    );\n  }\n\n  private getClosureReference(closureExpr: ExpressionRef): ExpressionRef {\n    var module = this.module;\n    var wasm64 = this.options.nativeSizeType == NativeType.I64;\n\n    return module.binary(\n      wasm64 ? BinaryOp.OrI64 : BinaryOp.OrI32,\n      module.binary(\n        wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n        closureExpr,\n        wasm64 ? module.i64(4) : module.i32(4)\n      ),\n      wasm64 ? module.i64(CLOSURE_TAG) : module.i32(CLOSURE_TAG)\n    );\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let thisType = assert(actualFunction.signature.thisType);\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          flow.set(FlowFlags.ACCESSES_THIS);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        var localClosureContextOffset = local.closureContextOffset;\n        if (localClosureContextOffset > 0) {\n          let contextLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n          // TODO: replace this with a class field access, once we are able to construct the class before\n          // compiling\n          return module.load(\n            local.type.byteSize,\n            local.type.is(TypeFlags.SIGNED),\n            this.module.local_get(contextLocal.index, this.options.nativeSizeType),\n            local.type.toNativeType(),\n            localClosureContextOffset\n          );\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(<Expression>expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr, arrayType);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression),\n          arrayType\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression),\n          program.arrayBufferInstance.type\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression),\n          program.arrayBufferInstance.type\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.classReference;\n    if (!contextualType.is(TypeFlags.REFERENCE) || !classReference || classReference.kind != ElementKind.CLASS) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr, fieldType);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by default ctor\n      }\n\n      if (fieldType.is(TypeFlags.REFERENCE) && fieldType.classReference !== null) {\n        // TODO: Check if it is a class, with a default value (constructor with no params).\n        if (!fieldType.is(TypeFlags.NULLABLE)) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(classReference, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        null,\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        null,\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    var classType = classInstance.type;\n    if (classType.isManaged) allocExpr = this.makeRetain(allocExpr, classType);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT\n        );\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, false, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.ANYREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      while (classReference) {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr, fieldType);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr, fieldType);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  Closure_support_is_experimental = 6190,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 6190: return \"Closure support is experimental.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart: i32 = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, assert(this.currentSource));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n    \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n    \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}